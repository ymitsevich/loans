services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        INSTALL_DEV: "true"
    command:
      - --reload
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/src
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://loans:loans@postgres:5432/loans}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-kafka:29092}
      REPOSITORY_BACKEND: ${REPOSITORY_BACKEND:-postgres}
      CACHE_BACKEND: ${CACHE_BACKEND:-redis}
      PUBLISHER_BACKEND: ${PUBLISHER_BACKEND:-kafka}
      PYTEST_ADDOPTS: "-p no:cacheprovider"
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "${API_HOST_PORT:-18000}:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request; urllib.request.urlopen('http://localhost:8000/loans/health')",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - backend

  postgres:
    image: postgres:16-alpine
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-loans}
      POSTGRES_USER: ${POSTGRES_USER:-loans}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-loans}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB:-loans} -U ${POSTGRES_USER:-loans}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --save 60 1
    ports:
      - "${REDIS_HOST_PORT:-16379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "zookeeper-shell localhost:2181 ls / >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - backend

  processor:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        INSTALL_DEV: "true"
    entrypoint: ["python"]
    command: ["scripts/application_processor.py"]
    env_file:
      - .env
    environment:
      PYTHONPATH: /app/src
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://loans:loans@postgres:5432/loans}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-kafka:29092}
      KAFKA_APPLICATION_TOPIC: ${KAFKA_APPLICATION_TOPIC:-loan-applications}
      KAFKA_CONSUMER_GROUP: ${KAFKA_CONSUMER_GROUP:-loans-consumer}
      REPOSITORY_BACKEND: postgres
      CACHE_BACKEND: redis
      PUBLISHER_BACKEND: memory
      PROCESSOR_METRICS_PORT: ${PROCESSOR_METRICS_PORT:-9000}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./scripts:/app/scripts:ro
    ports:
      - "${PROCESSOR_METRICS_PORT:-9000}:${PROCESSOR_METRICS_PORT:-9000}"
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_log:
